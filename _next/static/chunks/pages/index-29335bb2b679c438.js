(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{1464:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return n(9325)}])},9325:function(e,t,n){"use strict";n.r(t),n.d(t,{__toc:function(){return a},default:function(){return d}});var o=n(5893),r=n(2673),c=n(7758);n(7294);let i={logo:(0,o.jsx)("span",{children:"Async MQTT"}),project:{link:"https://github.com/redboltz/async_mqtt/tree/doc"},docsRepositoryBase:"https://github.com/redboltz/async_mqtt/tree/doc",footer:{text:"Async MQTT C++ library"}};n(9966);var s=n(2643);let a=[];function l(e){let t=Object.assign({h1:"h1"},(0,s.a)(),e.components);return(0,o.jsx)(t.h1,{children:"Hello Developer!"})}let u={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,s.a)(),e.components);return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)},pageOpts:{filePath:"pages/index.mdx",route:"/",pageMap:[{kind:"Meta",data:{index:"Async MQTT C++ Library"}},{kind:"MdxPage",name:"index",route:"/"}],flexsearch:{codeblocks:!0},title:"Hello Developer!",headings:a},pageNextRoute:"/",nextraLayout:c.ZP,themeConfig:i};var d=(0,r.j)(u)}},function(e){e.O(0,[774,161,888,179],function(){return e(e.s=1464)}),_N_E=e.O()}]);